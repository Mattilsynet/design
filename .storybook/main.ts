import fs from "node:fs";
import path from "node:path";
import { icons } from "@phosphor-icons/core";
import type { StorybookConfig } from "@storybook/react-vite";
import fg from "fast-glob";

const DESIGN_DIR = path.resolve("./designsystem");
const FOLDERS = "@(identitet|designsystem|profilering)";

const pkg = JSON.parse(
	fs.readFileSync(path.resolve(process.cwd(), "package.json"), "utf-8"),
);

const toUTF8 = (str: string) =>
	encodeURIComponent(str).replace(/%([a-f0-9]{2})/gi, (_, $1) =>
		String.fromCharCode(Number.parseInt($1, 16)),
	);

// Generate graphics overview
const graphics = Object.fromEntries([
	...icons.map(({ name, categories, tags }) => [
		`@phosphor-icons/${name}.svg`,
		{ categories, tags },
	]),
	...fg.sync("public/**/index.json").flatMap((file) => {
		const dir = path.dirname(file.split("/").slice(1).join("/"));
		const json = JSON.parse(fs.readFileSync(file, "utf-8"));
		return Object.entries(json).map(([name, data]) => [`${dir}/${name}`, data]);
	}),
]);

for (const file of fg.sync([
	"public/**/*.{svg,jpg,jpeg}",
	"node_modules/@phosphor-icons/core/**/regular/*.svg",
])) {
	const name = path.basename(file);
	const key = `${file.split("/")[1]}/${name}`;
	const svg = file.endsWith(".svg") && toUTF8(fs.readFileSync(file, "utf-8"));
	graphics[key] = { categories: [], tags: [], name, svg, ...graphics[key] };
}

// Generate overview.mdx
const stories = fg
	.sync(path.join(DESIGN_DIR, "*/*.stories.tsx"))
	.sort()
	.map((file) => ({
		name: path
			.basename(path.dirname(file))
			.replace(/./, (m) => m.toUpperCase()),
		file: path.relative(DESIGN_DIR, file),
	}));

fs.writeFileSync(
	path.join(DESIGN_DIR, "overview.mdx"),
	`{/* THIS FILE IS AUTOGENERATED */}
import { Meta } from '@storybook/addon-docs/blocks';
import { SquaresFourIcon } from "@phosphor-icons/react";
import { Overview } from '../.storybook/blocks';
${stories.map(({ name, file }) => `import * as ${name} from './${file}';`).join("\n")}

<Meta title="Designsystem/Komponenter" />

# <SquaresFourIcon /> Komponenter

<Overview items={[${stories.map(({ name }) => name).join(", ")}]} />`,
);

export default {
	stories: [
		`../${FOLDERS}/**/*.mdx`,
		`../${FOLDERS}/**/*.stories.@(js|jsx|mjs|ts|tsx)`,
	],
	addons: ["@storybook/addon-themes", "@storybook/addon-docs"],
	core: {
		disableTelemetry: true,
	},
	framework: {
		name: "@storybook/react-vite",
		options: {},
	},
	typescript: {
		check: false,
		reactDocgen: false, // Speed up as we put all props in argTypes
	},
	// Expose package versions and icons
	previewHead: async (head) =>
		`${head}<script>
      window.VERSION = ${JSON.stringify(pkg.version)};
      window.GRAPHICS = ${JSON.stringify(graphics)};
    </script>`,
} satisfies StorybookConfig;
