@layer mt.design {
	.heading {
		composes: ds-heading from "@digdir/designsystemet-css";
		--mtdsc-heading-gap: var(--ds-size-2);

		display: flex;
		align-items: center;
		flex-wrap: wrap;
		gap: var(--mtdsc-heading-gap);
		scroll-margin-block: 4em; /* Ensure scrolling to headings still have some comfortable spacing above */
		text-wrap: pretty;
	}
	.heading[data-justify="start"] {
		text-align: start;
	}
	.heading[data-justify="center"] {
		text-align: center;
	}
	.heading[data-justify="end"] {
		text-align: end;
	}
	.heading svg {
		vertical-align: -0.15em;
	}

	.ingress {
		font-size: 1.333333em;
	}
	.muted,
	small {
		font-size: max(0.888888em, 0.75rem);
	}

	/**
	 * Info
	 */
	.info {
		--mtdsc-info-gap: var(--ds-size-2);
		--mtdsc-info-icon-size: 1em;
		--mtdsc-info-circle-gap: var(--ds-size-3);
		--mtdsc-info-circle-size: var(--ds-size-10);
		--mtdsc-info-line-height: var(--ds-line-height-sm);
		--_mtdsc-info-lh: calc(var(--mtdsc-info-line-height) * 1em); /* Fallback if not supporting lh unit */
		--_mtdsc-info-x: calc(var(--mtdsc-info-icon-size) + var(--mtdsc-info-gap));
		line-height: var(--mtdsc-info-line-height);
	}
	.info:not([hidden]),
	.info strong:not([hidden]) {
		display: block;
	}
	.info > span[data-nowrap] {
		overflow: clip;
		text-overflow: ellipsis;
		white-space: nowrap;
	}
	@supports (height: 1lh) {
		.info {
			--_mtdsc-info-lh: 1lh;
		}
	}
	.info:has(> :is(svg, i)) {
		padding-left: var(--_mtdsc-info-x);
	}
	.info > :is(svg, i) {
		box-sizing: border-box;
		height: var(--_mtdsc-info-lh);
		margin-left: calc(var(--_mtdsc-info-x) * -1);
		position: absolute;
		text-align: center;
		width: var(--mtdsc-info-icon-size);
	}
	.info[data-variant="circle"] {
		--_mtdsc-info-y: var(--ds-size-1); /* center-align to two lines, but not more */
		--_mtdsc-info-x: calc(
			var(--mtdsc-info-circle-size) +
			var(--mtdsc-info-circle-gap)
		);
		min-height: calc(var(--mtdsc-info-circle-size) + var(--_mtdsc-info-y));
	}
	.info[data-variant="circle"] > :is(svg, i) {
		background: var(--ds-color-background-tinted);
		border-radius: var(--ds-border-radius-full);
		color: var(--ds-color-text-default);
		height: var(--mtdsc-info-circle-size);
		margin-top: var(--_mtdsc-info-y);
		width: var(--mtdsc-info-circle-size);
		padding: calc(
			(var(--mtdsc-info-circle-size) - var(--mtdsc-info-icon-size)) /
			2
		);
	}

	/**
	 * Prose
	 */
	.prose {
		--mtdsc-prose-spacing: 1em;
		--mtdsc-prose-max-width: 45rem;
	}
	.prose[data-justify="start"] {
		text-align: start;
	}
	.prose[data-justify="center"] {
		text-align: center;
	}
	.prose[data-justify="end"] {
		text-align: end;
	}
	.prose > * {
		margin-block: 1em;
	}
	.prose > :first-child {
		margin-top: 0;
	}
	.prose > :last-child {
		margin-bottom: 0;
	}
	.prose > :where(p, ul, ol, h1, h2, h3, h4, h5, h6) {
		max-width: var(--mtdsc-prose-max-width);
	}
	.prose > :where(ul, ol):not([class]) {
		padding-left: 1em;
	}
	.prose > :where(ul, ol):not([class]) > li:not(:first-child) {
		margin-top: var(--ds-size-2);
	}
	.prose > :where([class*="heading"]) {
		margin-block: 1.5em 0;
		max-width: var(--mtdsc-prose-max-width);
	}
	.prose > :where([class*="heading"]) + :where(p, ul, ol) {
		margin-top: 0.5rem; /* size 2 is written as .5rem to for consistent value regardless of headings size */
	}
	.prose > :where([class*="heading"]) + :where([class*="heading"]) {
		margin-top: 1rem; /* Heading followed by heading shoul have size 4 between */
	}
	.prose > :where(button:not([hidden])) {
		display: flex; /* Swap to flex instead of inline-flex to make margins collapse */
		width: fit-content;
	}
	.prose > figure:not([hidden]) {
		display: grid;
		gap: var(--ds-size-3);
		margin: var(--ds-size-8) 0;
	}
	.prose > figure > figcaption {
		font-size: var(--ds-font-size-minus-1);
	}
}
