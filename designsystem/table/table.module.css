@layer mt.design {
	.table {
		composes: ds-table from "@digdir/designsystemet-css";

		--dsc-table-background: transparent;
		--dsc-table-border-color: var(--mtds-color-200);
		--dsc-table-color: inherit;
		--dsc-table-divider-border-width: 1px;
		--dsc-table-header-background--hover: transparent;
		--dsc-table-header-background--sorted: transparent;
		--dsc-table-header-background: transparent;

		vertical-align: top;

		&[data-fixed] {
			table-layout: fixed;
		}
		& > :is(thead, tbody, tfoot) {
			vertical-align: inherit;
		}
		&[data-align="center"] {
			vertical-align: middle;
		}
	}

	/**
	 * Numeric
	 */
	.table :where([data-numeric]:not([data-numeric="false"])):where(td, th) {
		font-variant-numeric: tabular-nums;
		text-align: end;
		white-space: nowrap;
	}

	/**
	 * Nowrap
	 */
	.table[data-nowrap],
	.table [data-nowrap] {
		white-space: nowrap;
	}

	/**
	 * Table border and heading fix
	 */
	.table:not([data-border="true"]) > thead > tr:last-child > :is(td, th) {
		border-bottom-color: currentcolor;
		vertical-align: bottom;
	}
	.table[data-border="true"] {
		--dsc-table-background: var(--mtds-color-white);
	}
	.table[data-border="true"] > thead > tr > :is(th, td) {
		background-color: #eef1ea; /* TODO: integrate into color system */
	}

	/**
	 * Expandable
	 */
	.table > tbody > tr:has(> :is(td, th) > button[aria-expanded]) {
		/* Fake position: relative on `<tr>` elements: https://mtsknn.fi/blog/relative-tr-in-safari/ */
		/* transform: translate(0);
		clip-path: inset(0); */
		transition: .2s;

		/* &:has(> :is(td, th) > button[aria-expanded]:hover) {
			background-color: var(--ds-color-accent-surface-hover);
		} */

		&:has(button[aria-expanded="false"]) + tr > td[colspan]:only-child {
			display: none;
		}

		@media (prefers-reduced-motion: no-preference) {
			/* biome-ignore lint/correctness/noUnknownProperty: biome does not know about this property yet */
			interpolate-size: allow-keywords;

			&::part(details-content) {
				block-size: 0;
				overflow-y: clip;
				transition: content-visibility 400ms allow-discrete, height 400ms;
			}

			&[open]::part(details-content) {
				height: auto;
			}
		}

		& > :is(td, th) > button[aria-expanded] {
			all: unset;
			box-sizing: border-box;
			cursor: pointer;
			border-radius: var(--ds-border-radius-sm);
			width: 100%;

			&:focus-visible {
				box-shadow: var(--ds--focus, var(--dsc-focus-boxShadow));
				outline: var(--ds--focus, var(--dsc-focus-outline));
				outline-offset: var(--ds--focus, var(--dsc-focus-border-width));
			}

			/* &::after {
				content: "";
				inset: 0;
				position: absolute;
			} */

			&::before {
				background: currentcolor;
				content: "";
				display: inline-block;
				height: var(--mtds-icon-size);
				margin-inline-end: var(--ds-size-2);
				mask: center / contain no-repeat var(--mtds-icon-chevron);
				rotate: 90deg;
				transition: rotate .2s;
				vertical-align: -.3em;
				width: var(--mtds-icon-size);
			}

			&[aria-expanded="true"]::before {
				rotate: -90deg;
			}
		}
	}

	/**
	 * Checkable
	 */
	.table > :is(thead, tbody, tfoot) > tr > :is(td, th) label {
		font-weight: inherit;
	}

	/**
	 * Scrollable
	 */
	figure:has(> .table) {
		animation: _scrollShadow linear;
		animation-timeline: scroll(self inline);
		margin-inline: 0;
		overflow: auto;
		overscroll-behavior-x: contain; /* Prevent browser back/forward history on end of scroll */
	}
	@keyframes _scrollShadow {
		from {
			box-shadow: inset -.5rem 0 .5rem -.5rem rgb(0 0 0 / 0.4);
		}
		to {
			box-shadow: inset .5rem 0 .5rem -.5rem rgb(0 0 0 / 0.4);
		}
	}

	/**
	 * Mobile versions (up to 960px)
	 */
	@media screen and (max-width: 60em) {
		.table[data-mobile] {
			border-collapse: collapse; /* Allow rows to have border */
			table-layout: auto; /* Allow content to grow in each <td> */
		}
		.table[data-mobile] > :is(thead, tfoot) {
			display: none; /* Hide header and footer */
		}
		.table[data-mobile] > tbody {
			display: contents; /* Skip <tbody> */
		}
		.table[data-mobile] > tbody > tr {
			display: table-row-group; /* But make each row a <tbody> */

			&:first-child > :first-child {
				border-top: var(--dsc-table-divider-border-width) var(--dsc-table-divider-border-style);
			}
		}

		/* Do not re-syle if expandable (colspan) */
		.table[data-mobile] > tbody > tr > :not([colspan]) {
			display: table-row;
			font-weight: normal;
			text-align: inherit; /* Undo data-numeric alignment */

			&:last-child {
				border-bottom: var(--dsc-table-divider-border-width) var(--dsc-table-divider-border-style);
			}

			&::before {
				box-sizing: border-box;
				content: attr(data-th);
				display: table-cell;
				font-weight: 700;
				padding: var(--dsc-table-padding);
				text-align: start;
				width: 50%; /* Emulate table-layout: fixed */
			}
			&[data-th=":empty"]:before {
				content: "\200B" / ""; /* ...and hide from screen reader when supported */
				content: "\200B"; /* zero-width space to ensure correct line-height... */
				padding-inline: 0;
				width: 0;
			}
		}

		/* Only right-align if headers are present */
		.table[data-mobile="spaced"]:has(thead) > tbody > tr > :not([colspan]) {
			text-align: end;
		}

		.table[data-mobile="stacked"],
		.table[data-mobile="stacked"] > tbody,
		.table[data-mobile="stacked"] > tbody > tr {
			display: block;
		}
		.table[data-mobile="stacked"] > tbody > tr > :not([colspan]) {
			display: block;
			padding: var(--ds-size-3) 0;

			&::before {
				display: block;
				padding: 0;
			}
		}
		.table[data-mobile="stacked"] > tbody > tr > :first-child {
			padding-top: var(--ds-size-6);
		}
		.table[data-mobile="stacked"] > tbody > tr > :last-child {
			padding-bottom: var(--ds-size-6);
		}
	}
}
