@layer mt.design {
	.field {
		composes: ds-field from "@digdir/designsystemet-css";
		position: relative; /* Support <u-datalist> positioning */
		row-gap: var(--dsc-field-content-spacing);
		text-wrap: pretty; /* Make required tag wrap pretty */
	}
	.field > * {
		text-wrap: wrap; /* Reset text-wrap */
	}

	/* Remove space between label and description */
	.field > p:first-of-type,
	.field > [data-description] {
		margin-top: 0;
	}
	.field > :not(:disabled, [aria-disabled="true"]) {
		opacity: 1; /* Overwrite DigiDir disabled */
	}
	.field textarea {
		height: var(--mtds-textarea-height); /* Set height through CSS custom property instead of directly in JS for easier overwrite */
	}

	/**
	 * Mark <label> as required
	 */
	.field label {
		display: contents;
	}
	.field label svg {
		vertical-align: -.15em;
	}
	.field:has(:required, [aria-required="true"]) label::after {
		background: var(--ds-color-info-surface-tinted);
		border-radius: var(--ds-border-radius-md);
		border: var(--ds-border-width-default) solid
			var(--ds-color-info-border-subtle);
		color: var(--ds-color-info-text-default);
		content: var(--mtds-text-required);
		font-size: .75em;
		font-weight: normal;
		margin-left: 1ch;
		padding: .18em var(--ds-size-2);
		vertical-align: .1em;
		white-space: nowrap;
	}

	/**
	 * Toggles
	 */
	.field:has(input:is([type="radio"], [type="checkbox"])) {
		grid-template: "input content help" / auto 1fr auto; /* Make space for helpText as well */
		gap: 0;

		& > input {
			margin-right: var(--mtdsc-field-content-spacing);
		}

		/* Helptext */
		& > button[class*="helptext"] {
			grid-area: help;
			margin-block: 0;
		}

		& label {
			font-weight: normal;
		}
		& :is(p, [data-description]) {
			font-size: var(--ds-font-size-minus-1);
		}
		&:has([readonly]:disabled) label {
			cursor: default; /* Stiling when both readonly and disabled since browser does not prevent readonly on checkobx/radio */
		}
	}

	/**
	 * Combobox
	 */
	.field u-combobox {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		gap: var(--ds-size-2);
		position: relative;
	}
	.field u-combobox > input {
		flex: 1 0 100%;
	}
	.field u-combobox > input[list]:has(~ del) {
		padding-right: 3.75em;
	}

	/* Clear button */
	.field u-combobox > del {
		border-radius: var(--ds-border-radius-sm);
		cursor: pointer;
		height: 2em;
		margin-left: -4.25em;
		outline: 0;
		position: relative;
		width: 2em;
	}
	.field u-combobox > del::after {
		background: currentColor;
		content: ""; /* Fallback for old Firefox & iOS Safari */
		display: block;
		height: 100%;
		mask: center / 50% no-repeat var(--mtds-icon-close);
		width: 100%;
	}

	/* This can go back into the main element when Apple supports content in iOS Safari */
	@supports (content: "" / "") {
		.field u-combobox > del::after {
			content: "" / var(--mtds-text-combobox-clear);
		}
	}

	.field
		u-combobox[data-multiple]:not([data-multiple="false"])
		> data:not([hidden]) {
		align-items: center;
		background: var(--ds-color-surface-tinted);
		border-radius: var(--ds-border-radius-full);
		border: 1px solid var(--ds-color-border-subtle);
		box-sizing: border-box;
		color: var(--ds-color-text-default);
		cursor: pointer;
		display: inline-flex;
		font-size: var(--ds-font-size-minus-1);
		line-height: var(--ds-line-height-sm);
		min-height: var(--ds-size-8);
		padding-left: var(--ds-size-3);
		text-decoration: none;
		transition: .2s;
	}
	.field u-combobox > data::after {
		background: currentcolor;
		height: var(--ds-size-8);
		mask: center / 60% no-repeat var(--mtds-icon-close);
		width: var(--ds-size-8);
		padding: 0;
		border-radius: var(--ds-border-radius-full);
	}
	.field u-combobox > data:hover::after {
		mask-image: var(--mtds-icon-close--filled);
		mask-size: 100%;
	}
	.field u-datalist {
		--from: -2px;
		animation: _datalist .2s forwards;
		background: var(--ds-color-surface-default);
		border-radius: var(--ds-border-radius-md);
		border: 1px solid var(--ds-color-border-subtle);
		box-shadow: var(--ds-shadow-md);
		box-sizing: border-box;
		color: var(--ds-color-text-default);
		left: 0;
		margin: var(--ds-size-1) 0;
		max-height: 400px;
		max-width: calc(100vw - 20px);
		overflow: auto;
		padding: var(--ds-size-2);
		position: absolute;
		top: 0;
	}
	.field u-datalist[data-position="top"] {
		--from: 2px;
	}
	@keyframes _datalist {
		from {
			translate: 0 var(--from);
			opacity: 0;
		}
	}
	.field u-option {
		position: relative;
		border-radius: var(--ds-border-radius-sm);
		outline: 0;
		padding: var(--ds-size-2);
		transition: .1s background-color;
	}
	.field u-option[selected] {
		padding-left: var(--ds-size-10);
	}
	.field u-option[selected]::before {
		background: currentcolor;
		content: "";
		mask: center / contain no-repeat var(--mtds-icon-check);
		position: absolute;
		inset: 0 auto 0 var(--ds-size-2);
		width: var(--mtds-icon-size);
	}
	.field u-option:hover {
		background: var(--ds-color-surface-hover);
	}

	.field u-option:focus,
	.field u-combobox > del:focus,
	.field u-combobox > data:focus {
		box-shadow: var(--dsc-focus-boxShadow);
		outline-offset: var(--ds-border-width-focus);
		outline: var(--dsc-focus-outline);
	}
	.field u-datalist:not(:has(u-option[aria-hidden="false"]))::before {
		content: var(--mtds-text-datalist-empty); /* Hide empty datalist */
	}

	/**
	 * Affixes
	 */
	.affixes {
		composes: ds-field-affixes from "@digdir/designsystemet-css";

		--dsc-field-affix-border-color: var(--ds-color-border-default);

		align-items: center;
		background: var(--ds-color-background-tinted);
		box-shadow: inset 0 0 0 1px var(--dsc-field-affix-border-color);
		color: inherit;
		white-space: nowrap;
	}
	.affixes:where(:not([hidden])) {
		display: flex;
	}

	/* TMP: LastPass fix */
	.affixes > :not(:empty) {
		padding-inline: var(--dsc-field-affix-padding-inline);
	}
	.affixes > input:has(+ [data-lastpass-icon-root]) {
		border-bottom-right-radius: var(--ds-border-radius-md);
		border-top-right-radius: var(--ds-border-radius-md);
	}
}

/* Add option to hide required text */
[data-required="hidden"] {
	--mtds-text-required: none;
}
