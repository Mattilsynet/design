@layer mt.design {
	.button {
		composes: ds-button from "@digdir/designsystemet-css";

		flex-shrink: 0; /* If placed in flex */
		max-width: 100%;
		transition-duration: .2s;
		transition-property: background-color, scale, translate;

		&:where(:not([hidden])) {
			display: inline-flex;
			vertical-align: middle;
		}

		/* Overwrite to same as tertiary from Designsystemet  */
		&:not([data-variant="primary"]) {
			--dsc-button-background: transparent;
			--dsc-button-background--active: var(--ds-color-surface-active);
			--dsc-button-background--hover: var(--ds-color-surface-hover);
			--dsc-button-color: var(--ds-color-text-default);
			--dsc-button-color--hover: var(--ds-color-text-default);
		}

		&[data-variant="primary"] {
			border: 0; /* Hide border to ensure equal heights */
		}
		&[data-variant="secondary"] {
			--dsc-button-border-color: var(--ds-color-border-default);
		}

		&[aria-current]:not([aria-current="false"]) {
			--dsc-button-background: var(--ds-color-surface-tinted);
			font-weight: 700;
		}
		&[data-justify="start"] {
			justify-content: start;
		}
		&[data-justify="end"] {
			justify-content: end;
		}

		&::before,
		& > svg {
			fill: currentColor;
			flex-shrink: 0;
			height: var(--mtds-icon-size);
			width: var(--mtds-icon-size);
		}

		&:disabled,
		&[aria-disabled="true"] {
			pointer-events: none;
		}

		&:active {
			scale: 0.95;
		}

		& [data-nowrap] {
			overflow: clip;
			text-overflow: ellipsis;
			white-space: nowrap;
			min-width: 0;
		}

		/**
		 * Paint ellipsis when empty
		 */
		&:empty::before {
			background: currentcolor;
			content: "";
			mask: center / contain no-repeat var(--mtds-icon-ellipsis);
		}

		/**
		 * Arrows and popover
		 */
		&[data-arrow]::before {
			background: currentcolor;
			content: "";
			mask: center / contain no-repeat var(--mtds-icon-arrow);
			order: 1; /* Use ::before and change order so ::after is allways unused, and loading will be placed where arrow was */
		}
		&[data-arrow="left"]::before {
			order: -1;
			rotate: 180deg;
		}
		&[data-arrow][popovertarget]::before {
			mask-image: var(--mtds-icon-chevron);
			transition: rotate .2s ease-out;
		}
		&[data-arrow][popovertarget]:has(+ :popover-open)::before {
			rotate: -180deg;
		}

		/**
		 * Loading
		 */
		&[aria-busy="true"] {
			pointer-events: none;
		}
		&[aria-busy="true"]::before {
			background: currentcolor;
			content: var(--mtds-text-loading);
			display: inline-block;
			height: var(--mtds-icon-size);
			mask: center / contain no-repeat var(--mtds-icon-spinner);
			overflow: clip;
			text-align: center;
			vertical-align: middle;
			white-space: nowrap;
			width: var(--mtds-icon-size);
		}

		/**
		 * Aria-pressed / Popover-open
		 */
		&[popovertarget]:has(+ :not(:popover-open)) [data-pressed="true"],
		&[popovertarget]:has(+ :popover-open) [data-pressed="false"],
		&[aria-pressed="false"] [data-pressed="true"],
		&[aria-pressed="true"] [data-pressed="false"] {
			display: none;
		}
	}

	/**
	 * In <menu>
	 */
	/* Using :where to only reset browser agent standards, but allow direct child selector (.something > *) to still winn */
	menu:where(:has(> li > .button)) {
		list-style: none;
		padding: 0;
		margin: 0;

		& > li + li {
			margin-top: 0.125rem; /* Add 2px space between buttons in menu */
		}

		/* Add zero-width space to fix iOS VoiceOver list announcement https://gerardkcohen.me/writing/2017/voiceover-list-style-type.html */
		& > li::before {
			content: "\200B";
			position: absolute;
		}
	}
	menu > li > .button {
		border-radius: var(--ds-border-radius-md);
		font-weight: normal;
		justify-content: start;
		width: 100%;
	}
}
