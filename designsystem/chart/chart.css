:host(:not([hidden])) {
	display: grid;
	gap: var(--ds-size-6);

	--mtdsc-chart-aspect: 16 / 9;
	--mtdsc-chart-axis-border: var(--ds-border-width-default) solid
		var(--ds-color-border-subtle);
	--mtdsc-chart-axis-gap: var(--ds-size-4);
	--mtdsc-chart-border-width: var(--ds-border-width-default);
	--mtdsc-chart-border-color: #054449; /*var(--ds-color-border-default);*/
	--mtdsc-chart-color: var(--ds-color-surface-tinted);
	--mtdsc-chart-color-1: #116e6b; /* var(--ds-color-base-default); */
	--mtdsc-chart-color-2: #cae8ca; /*var(--ds-color-surface-active); */
	--mtdsc-chart-color-3: #b6d9f2;
	--mtdsc-chart-color-4: #feecbe; /*var(--ds-color-warning-surface-hover);*/
	--mtdsc-chart-color-5: #fdd2c9; /*var(--ds-color-danger-surface-active);*/
	--mtdsc-chart-color-6: var(--ds-color-neutral-surface-tinted);
}

[data-event-proxy] {
	cursor: pointer;
}

.pie {
	overflow: visible;
	aspect-ratio: var(--mtdsc-chart-aspect);
}
.pie > path {
	fill: var(--color);
	outline: none;
	stroke-width: var(--mtdsc-chart-border-width);
	stroke: var(--mtdsc-chart-border-color);
	transform-origin: center;
	transition: scale 0.2s;
	vector-effect: non-scaling-stroke;
}
.pie > path:focus-visible,
.pie > path:hover {
	scale: 1.05;
}

:host([data-variant="doughnut"]) .axis,
:host([data-variant="pie"]) .axis {
	display: none;
}

.axis {
	font-size: var(--ds-body-sm-font-size);
	aspect-ratio: var(--mtdsc-chart-aspect);
	display: grid;
	gap: var(--mtdsc-chart-axis-gap);
	grid-template-columns: fit-content(7em) 1fr;
	grid-template-rows: 1fr auto;
	grid-template-areas:
		"y-axis chart"
		"y-axis x-axis";
}

.axis::before {
	content: "";
	grid-area: chart;
	border-style: solid;
	border-width: 0 0 var(--ds-border-width-default)
		var(--ds-border-width-default);
	border-bottom-left-radius: var(--ds-border-radius-lg);
}

.axisSteps,
.axisStep,
.axisGroups,
.axisGroup {
	box-sizing: border-box;
	display: grid;
	position: relative; /* Help .lineContainer positioning */
}

.axisGroups {
	gap: var(--mtdsc-chart-axis-gap);
	grid-area: chart / chart / x-axis / chart;
	grid-template: subgrid / none;
	padding: 0 var(--mtdsc-chart-axis-gap);
	text-align: center;
}
.axisGroup {
	grid-row: inherit;
	grid-template: inherit;
}
.axisGroup::after {
	content: attr(data-label);
}
.axisSteps {
	grid-auto-rows: 1fr;
	grid-area: chart / y-axis / chart / chart;
	grid-template: 1px / subgrid;
}
.axisStep {
	grid-column: inherit;
	grid-template-columns: inherit;
	place-content: end start;
	text-align: right;
}
.axisStep::after {
	border-bottom: var(--mtdsc-chart-axis-border);
	content: "";
}
.axisStep::before {
	content: attr(data-label);
	translate: 0 50%;
}

:host([data-variant|="column"]) .axisSteps,
:host([data-variant|="column"]) .axisGroup {
	direction: rtl; /* Reverse orders */
}
:host([data-variant|="column"]) .axisSteps > *,
:host([data-variant|="column"]) .axisGroup > * {
	direction: ltr;
}
:host([data-variant|="column"]) .axisGroups {
	grid-area: chart / y-axis / chart / chart;
	grid-template: none / subgrid;
	padding: var(--mtdsc-chart-axis-gap) 0;
	row-gap: var(--mtdsc-chart-axis-gap);
	text-align: right;
}
:host([data-variant|="column"]) .axisGroup::after {
	align-self: center; /* Since text-align does not work vertically */
}
:host([data-variant|="column"]) .axisGroup {
	grid-column: inherit;
	grid-row: auto;
	grid-template: inherit;
}
:host([data-variant|="column"]) .axisSteps {
	grid-auto-columns: 1fr;
	grid-area: chart / chart / x-axis / chart;
	grid-template: subgrid / 1px;
}
:host([data-variant|="column"]) .axisStep {
	grid-row: inherit;
	grid-column: auto;
	grid-template-rows: inherit;
	grid-template-columns: none;
}
:host([data-variant|="column"]) .axisStep::after {
	order: -1;
	border-left: var(--mtdsc-chart-axis-border);
	border-bottom: 0;
}
:host([data-variant|="column"]) .axisStep::before {
	translate: -50% 0;
}

.axisGroupContent {
	display: flex;
}
:host([data-variant="bar-stacked"]) .axisGroupContent {
	flex-direction: column-reverse;
}
:host([data-variant="column"]) .axisGroupContent {
	flex-direction: column;
}
:host([data-variant="column-stacked"]) .axisGroupContent {
	flex-direction: row;
}

.bar {
	--size: calc(var(--value) / var(--total, 1) * 100%);
	align-self: end;
	background: var(--color);
	border: var(--mtdsc-chart-border-color) solid var(--mtdsc-chart-border-width);
	border-radius: var(--ds-border-radius-sm) var(--ds-border-radius-sm) 0 0;
	box-sizing: border-box;
	height: var(--size);
	width: 100%;
}
.bar:focus-visible,
.linePoint:focus-visible {
	box-shadow: var(--dsc-focus-boxShadow);
	outline: var(--dsc-focus-outline);
	outline-offset: var(--ds-border-width-focus);
	z-index: 2; /* z-index to place on top when outlined */
}

:host([data-variant|="column"]) .bar {
	border-radius: 0 var(--ds-border-radius-sm) var(--ds-border-radius-sm) 0;
	width: var(--size);
	height: 100%;
	align-self: start;
}

/* Prevent double border - using margin to see border around bars */
/* Prevent double border - using border to avoid affecting size */
:host(:not([data-variant])) .bar + .bar,
:host([data-variant="bar"]) .bar + .bar {
	margin-left: -1px;
}
:host([data-variant="bar-stacked"]) .bar:not(:last-child) {
	border-radius: 0;
}
:host([data-variant="bar-stacked"]) .bar + .bar {
	border-bottom: none;
}
:host([data-variant="column"]) .bar + .bar {
	margin-top: -1px;
}
:host([data-variant="column-stacked"]) .bar:not(:last-child) {
	border-radius: 0;
}
:host([data-variant="column-stacked"]) .bar + .bar {
	border-left: none;
}

.lineContainer {
	align-items: flex-start;
	display: flex;
	justify-content: space-between;
	pointer-events: none;
	grid-row: chart;
}
.lineContainer > svg,
.lineContainer {
	position: absolute;
	width: 100%;
	height: 100%;
}
.lineContainer > svg {
	overflow: clip visible;
}
.lineContainer > div[role="listitem"] {
	display: contents;
}

:host([data-variant|="line"]) .axisGroups,
:host([data-variant|="area"]) .axisGroups {
	padding: 0;
}

.line,
.lineShade {
	fill: none;
	stroke: var(--color);
	stroke-linejoin: round;
	stroke-linecap: round;
	stroke-width: 3;
	vector-effect: non-scaling-stroke;
}
.line {
	filter: brightness(0.8) saturate(2); /* Ensure more contrast for line colors */
}
.lineShade {
	stroke: none;
	fill: var(--color);
	opacity: 0.3;
	mask: linear-gradient(to bottom, black, transparent);
}
.linePoint {
	--size: var(--ds-size-3);
	background-color: var(--color);
	border-radius: var(--ds-border-radius-full);
	border: var(--mtdsc-chart-border-width) solid var(--mtdsc-chart-border-color);
	box-sizing: border-box;
	height: var(--size);
	margin: calc(var(--size) / -2);
	padding: 0;
	pointer-events: all;
	position: relative;
	top: calc(100% - var(--value) / var(--total, 1) * 100%);
	transition: scale 0.2s;
	width: var(--size);
	z-index: 2;
}
.linePoint:focus-visible,
.linePoint:hover {
	scale: 1.3;
}
.linePoint::before {
	content: "";
	inset: calc(var(--ds-size-2) * -1); /* Increase click surface */
	position: absolute;
}

.legends {
	align-items: center;
	display: flex;
	flex-wrap: wrap;
	gap: var(--ds-size-2) var(--ds-size-5);
	justify-content: center;
}
.legend {
	display: flex;
	align-items: center;
	gap: var(--ds-size-2);
}
.legend::before {
	background: var(--color);
	border-radius: var(--ds-border-radius-full);
	border: var(--mtdsc-chart-border-color) solid var(--mtdsc-chart-border-width);
	box-sizing: border-box;
	content: "";
	display: inline-block;
	height: var(--ds-size-5);
	vertical-align: middle;
	width: var(--ds-size-5);
}
