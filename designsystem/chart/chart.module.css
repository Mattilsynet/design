:host(:not([hidden])) {
	display: block;
	--mtdsc-chart-aspect: 16 / 9;
	--mtdsc-chart-axis-border: var(--ds-border-width-default) solid
		var(--ds-color-border-subtle);
	--mtdsc-chart-axis-gap: var(--ds-size-2);
	--mtdsc-chart-border-color: var(--ds-color-border-default);
	--mtdsc-chart-color-text: var(--ds-color-text-default);
	--mtdsc-chart-color: var(--ds-color-surface-tinted);
	--mtdsc-chart-color-1: #b4cea0;
	--mtdsc-chart-color-2: #68b096;
	--mtdsc-chart-color-3: #cde5f2;
	--mtdsc-chart-border-color-1: var(--ds-color-success-border-subtle);
	--mtdsc-chart-border-color-2: var(--ds-color-info-border-subtle);
	--mtdsc-chart-border-color-3: var(--ds-color-warning-border-subtle);
}

:host([data-variant="doughnut"]) {
	--mtdsc-chart-aspect: 1 / 1;
}

.doughnut {
	overflow: visible;
	height: 100%;
	width: 100%;
}
.doughnut > path {
	cursor: pointer;
	fill: var(--mtdsc-chart-color);
	outline: none;
	stroke-width: var(--ds-border-width-default);
	/* stroke: var(--ds-color-border-default); */
	transform-origin: center;
	transition: scale 0.2s;
	vector-effect: non-scaling-stroke;
}
.doughnut > path:focus-visible,
.doughnut > path:hover {
	scale: 1.05;
}

.color-1 {
	--mtdsc-chart-color: var(--mtdsc-chart-color-1);
	--mtdsc-chart-border-color: var(--mtdsc-chart-border-color-1);
}
.color-2 {
	--mtdsc-chart-color: var(--mtdsc-chart-color-2);
	--mtdsc-chart-border-color: var(--mtdsc-chart-border-color-2);
}
.color-3 {
	--mtdsc-chart-color: var(--mtdsc-chart-color-3);
	--mtdsc-chart-border-color: var(--mtdsc-chart-border-color-3);
}

.axis {
	aspect-ratio: var(--mtdsc-chart-aspect);
	display: grid;
	gap: calc(var(--mtdsc-chart-axis-gap) / 2);
	grid-template-columns: fit-content(7em) 1fr;
	grid-template-rows: 1fr auto;
	grid-template-areas:
		"y-axis chart"
		"y-axis x-axis";
}
.axisSteps,
.axisStep,
.axisGroups,
.axisGroup {
	box-sizing: border-box;
	display: grid;
	position: relative; /* Help .lineContainer positioning */
}

.is-horizontal .axisGroups {
	column-gap: var(--mtdsc-chart-axis-gap);
	grid-column: chart;
	grid-row: chart / x-axis;
	grid-template-rows: subgrid;
	padding-inline: var(--mtdsc-chart-axis-gap);
	text-align: center;
}
.is-horizontal .axisGroup {
	grid-row: chart / x-axis;
	grid-template-rows: inherit;
}
.is-horizontal .axisSteps {
	grid-auto-rows: 1fr;
	grid-column: y-axis / chart;
	grid-row: chart;
	grid-template-columns: subgrid;
	grid-template-rows: 1px;
}
.is-horizontal .axisStep {
	align-content: flex-end;
	grid-column: inherit;
	grid-template-columns: inherit;
	text-align: right;
}
.is-horizontal .axisStep::after {
	content: "";
	border-bottom: var(--mtdsc-chart-axis-border);
}
.is-horizontal .axisStep .axisLabel {
	transform: translateY(50%);
}

.is-vertical .axisSteps,
.is-vertical .axisGroup {
	direction: rtl; /* Reverse orders */
}
.is-vertical .axisSteps > *,
.is-vertical .axisGroup > * {
	direction: ltr;
}
.is-vertical .axisGroups {
	grid-column: y-axis / chart;
	grid-row: chart;
	grid-template-columns: subgrid;
	padding-block: var(--mtdsc-chart-axis-gap);
	row-gap: var(--mtdsc-chart-axis-gap);
	text-align: right;
}
.is-vertical .axisGroups .axisLabel {
	align-self: center; /* Since text-align does not work vertically */
}
.is-vertical .axisGroup {
	grid-column: inherit;
	grid-template-columns: inherit;
}
.is-vertical .axisSteps {
	grid-auto-columns: 1fr;
	grid-column: chart;
	grid-row: chart / x-axis;
	grid-template-columns: 1px;
	grid-template-rows: subgrid;
}
.is-vertical .axisStep {
	grid-row: inherit;
	grid-template-rows: inherit;
	justify-content: flex-start;
	text-align: center;
}
.is-vertical .axisStep::before {
	content: "";
	border-left: var(--mtdsc-chart-axis-border);
}
.is-vertical .axisStep .axisLabel {
	transform: translateX(-50%);
}

.axisGroupContent {
	display: flex;
	/* gap: 1px; */
}
.is-horizontal.is-stacked .axisGroupContent {
	flex-direction: column-reverse;
	row-gap: 0px;
}
.is-vertical.is-stacked .axisGroupContent {
	column-gap: 0px;
}
.is-vertical:not(.is-stacked) .axisGroupContent {
	flex-direction: column;
}

.bar {
	--size: calc(var(--value) / var(--total, 1) * 100%);
	background: var(--mtdsc-chart-color);
	/* border: 1px solid var(--mtdsc-chart-border-color); */
	box-sizing: border-box;
	color: var(--mtdsc-chart-color-text);
	padding: var(--ds-size-1);
	position: relative; /* Place above .lineContainer */
}
.bar:hover,
.bar:focus-visible {
	box-shadow: var(--dsc-focus-boxShadow);
	outline: var(--dsc-focus-outline);
	outline-offset: var(--ds-border-width-focus);
	z-index: 2; /* z-index to place on top when outlined */
}

.is-horizontal .bar {
	width: 100%;
	height: var(--size);
	align-self: flex-end;
	grid-row: chart;
} /* grid-row is only used if placed directly in Chart.Axis */
.is-vertical .bar {
	width: var(--size);
	height: 100%;
	grid-column: chart;
} /* grid-column is only used if placed directly in Chart.Axis */
.is-horizontal:not(.is-stacked) .axisGroup .bar + .bar {
	/* margin-left: -1px; */
} /* Prevent double border - using margin to see border around bars */
.is-vertical:not(.is-stacked) .axisGroup .bar + .bar {
	/* margin-top: -1px; */
} /* Prevent double border - using margin to see border around bars */
.is-horizontal.is-stacked .axisGroup .bar + .bar {
	border-bottom: none;
} /* Prevent double border - using border to avoid affecting size */
.is-vertical.is-stacked .axisGroup .bar + .bar {
	border-left: none;
} /* Prevent double border - using border to avoid affecting size */

.lineContainer {
	align-items: flex-start;
	display: flex;
	justify-content: space-between;
	pointer-events: none;
}
.lineContainer > svg,
.lineContainer {
	position: absolute;
	width: 100%;
	height: 100%;
}
.lineContainer > svg:first-child {
	z-index: 2;
}
.is-horizontal .lineContainer {
	grid-row: chart;
}
.is-horizontal .lineContainer > svg {
	overflow: clip visible;
}
.is-horizontal .lineContainer > div[role="listitem"] {
	display: contents;
}
.is-horizontal .lineContainer .linePoint {
	top: calc(100% - var(--value) / var(--total, 1) * 100%);
}
.is-vertical .lineContainer {
	flex-direction: column;
	grid-column: chart;
}
.is-vertical .lineContainer > svg {
	overflow: visible clip;
}
.is-vertical .lineContainer .linePoint {
	left: calc(var(--value) / var(--total, 1) * 100%);
}

.line,
.lineBorder,
.lineShade {
	fill: none;
	stroke: var(--mtdsc-chart-color);
	stroke-linejoin: round;
	stroke-linecap: round;
	stroke-width: 3;
	vector-effect: non-scaling-stroke;
}
.line.line {
	/* fill: none; /* Use double selector as fill should always be drawn by .lineShade */
}
.lineBorder {
	/* stroke-width: 5;
	stroke: var(--mtdsc-chart-border-color); */
}
.lineShade {
	stroke: none;
	fill: var(--mtdsc-chart-color);
	opacity: 0.15;
}
.linePoint {
	--size: 0.625rem; /* 10px */
	background-color: var(--mtdsc-chart-color);
	border-radius: var(--ds-border-radius-full);
	/* border: 1px solid var(--mtdsc-chart-border-color); */
	box-sizing: border-box;
	margin: calc(var(--size) / -2);
	padding: 0;
	pointer-events: all;
	position: relative;
	transition: scale 0.2s;
	width: var(--size);
	height: var(--size);
	z-index: 2;
}
.linePoint[hidden] {
	display: block;
	visibility: hidden;
} /* All dots need to render to make parent display: flex work, so instead hide visibility */
.linePoint:focus-visible,
.linePoint:hover {
	scale: 1.3;
}
.linePoint::before {
	content: "";
	inset: calc(var(--ds-size-2) * -1); /* Increase click surface */
	position: absolute;
}

.legends {
	align-items: center;
	display: flex;
	flex-wrap: wrap;
	gap: var(--ds-size-6);
	justify-content: center;
	margin-top: var(--ds-size-6);
}

.legend {
	display: flex;
	align-items: center;
	gap: var(--ds-size-2);
}
.legend::before {
	background-color: var(--mtdsc-chart-color);
	border-radius: var(--ds-border-radius-full);
	/* border: 1px solid var(--mtdsc-chart-border-color); */
	box-sizing: border-box;
	content: "";
	display: inline-block;
	vertical-align: middle;
	width: var(--ds-size-6);
	height: var(--ds-size-6);
}
