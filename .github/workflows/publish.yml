name: Publish to npm and GitHub

on: 
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: "Check version, build and publish"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version change
        id: check_version
        run: |
          if git diff HEAD^ HEAD -- package.json | grep '"version"'; then
            echo "Version changed, continuing."
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "Version not changed, skipping workflow."
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi

      # Node setup
      - uses: actions/setup-node@v4
        if: env.VERSION_CHANGED == 'true'
        with:
          node-version: lts/*
          cache: npm

      - name: Install dependencies
        if: env.VERSION_CHANGED == 'true'
        run: npm ci

      # Tagging the new release
      - name: Create a new Git tag
        if: env.VERSION_CHANGED == 'true'
        run: |
         VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Creating tag: $VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      # Publishing to npm
      - name: Creating .npmrc
        if: env.VERSION_CHANGED == 'true'
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}" > ~/.npmrc

      - name: Publish to npm
        if: env.VERSION_CHANGED == 'true'
        run: npm publish --access public

      # Publishing to GitHub
      - name: Recreating .npmrc for publishing to GitHub
        if: env.VERSION_CHANGED == 'true'
        run: |
          rm $HOME/.npmrc && 
          cat << EOF > "$HOME/.npmrc"
            @mattilsynet:registry=https://npm.pkg.github.com
            //npm.pkg.github.com/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GPR
        if: env.VERSION_CHANGED == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Setup clojure environment and cache
      - name: Prepare java
        if: env.VERSION_CHANGED == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install clojure tools
        if: env.VERSION_CHANGED == 'true'
        uses: DeLaGuardo/setup-clojure@12.1
        with:
          cli: 1.11.1.1413

      - name: Cache maven build deps
        if: env.VERSION_CHANGED == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-clojure-test-${{ hashFiles('deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure-test

      - name: Cache gitlibs
        if: env.VERSION_CHANGED == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.gitlibs
          key: ${{ runner.os }}-gitlibs-build-${{ hashFiles('deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-gitlibs-build

      # Publish to Clojars for clojure
      - name: Build and publish to Clojars
        if: env.VERSION_CHANGED == 'true'
        run: |
          cd ./clojure
          ./publish.sh
        env:
          CLOJARS_USERNAME: ${{ secrets.CLOJARS_USERNAME }}
          CLOJARS_PASSWORD: ${{ secrets.CLOJARS_PASSWORD }}
